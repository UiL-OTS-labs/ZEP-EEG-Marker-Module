/******************************************************************************\
FILE:           zep_markers.zm
AUTHOR:         Chris van Run <C.P.A.vanrun@uu.nl>
GITHUB:         https://github.com/UiL-OTS-labs/ZEP-Markers-Module
ADAPTED BY:     -

DESCRIPTION:

This Zep module provides a way to send markers (i.e. triggers) from your Zep
experiment to a parallel input port. One such input port is the USB receiver
of the BioSemi EEG equipment. This allows you to send markers with Zep!

When comparing this module with sending markers from Presentation we found that
this module is slightly MORE reliable than the Presentation (c) software. Zep
sends markers with LESS variation in timing. Please see the comparison_test folder
in the repository for details about the test.

ATTENTION:
For USAGE instruction or more information read the README.md or visit the github
link above.

HISTORY:
2017-06-12 CvR Adjusted and tested with BioSemi equipment.
2017-06-15 CvR Added develop mode.
2017-06-26 CvR Rewrite and refactor for zep 2.0

\******************************************************************************/

plugin zep_iospp;
plugin zep_math;
plugin zep_file;

import zep_markers_settings; // Contains all the configuration

// Sends the marker at a specified time with an optional pulse length.
// Returns true at successful setup
// THIS IS THE FUNCTION YOU WILL LIKELY WANT TO SUE
bool setup_marker_at(int number, time onset, dur pulse_length = zep_markers_settings::PULSE_LENGTH)
{
    Marker new_marker;
    new_marker.number       = number;
    new_marker.onset        = onset;
    new_marker.pulse_length = pulse_length;
    
    bool succes_flag = scheduler.add(new_marker);
    
    return succes_flag;
}

// Sends the marker as quickly as possible
// Returns true at successful setup
bool send_marker(int number, dur pulse_length = zep_markers_settings::PULSE_LENGTH)
{
    bool succes_flag = setup_marker_at(
            number,
            now() 
            + zep_markers_settings::SCHEDULER_PRE_EMPT 
            + zep_markers_settings::SCHEDULER_PRE_EMPT_ERROR_TOLERANCE,
            pulse_length
            );
    return succes_flag;
}

// Record to hold Marker information ( for internal module usage )
record Marker
{
    int number;
    time onset;
    dur pulse_length;
}

// Container and communication interface for the parallel port
SPP marker_device
{
    // members
    int mask_bit_size;
    int maximum_marker_number;
    int log_file_number;
    time init_time;

    on_event:init()
    {
        setup();
        if(error()) terminate;
    }

    void setup()
    {
        // warn if in development mode
        if(zep_markers_settings::DEVELOP_MODE)
            print_error("!! WARNING - "
                    "Marker module is in develop mode, does not require a"
                    + "parallel port but will print and NOT output markers"
                    + "!!\n"
                    );

        // lets start up the party
        start_port();
        this.data_is_output = true; // setup the port to output
        this.data_output_mask = 0xFF; // setup the output_mask to 0;
        if(error()) return;

        // init some variables
        mask_bit_size = zep_markers_settings::NUMBER_OF_OUTPUT_LINES_DEVICE;
        this.set_log_file_number(0);
        maximum_marker_number = int(exp(2,mask_bit_size))-1;
        init_time = now();

        // Start the log file.
        setup_log();
    }

    /*
     * To avoid collisions with other logging devices allow the
     * to set the log_file_number manually.
     *
     * Could be done directly on marker_device, but via function is
     * prettier.
     */
    void set_log_file_number(int number)
    {
        log_file_number = number;
    }

    // Opens up the connection to the port
    void start_port(int port_number = zep_markers_settings::PORT_NUMBER)
    {
        // Develop mode works without using an actual SPP
        if(zep_markers_settings::DEVELOP_MODE) return;

        this.open(port_number);

        if(!this.is_open)
        {
            print_error("!! ERROR - "
                    + "Marker module was unable to open port "
                    + port_number
                    + " !!\n"
                    );
        }
    }

    // Initiate the onset and offset timers for the marker
    void set_marker_timers(Marker mark)
    {
        marker_onset.mark = mark;
        marker_onset.start(mark.onset);
        marker_offset.start(mark.onset + mark.pulse_length);
    }

    Timer marker_onset
    {
        Marker mark;

        on_event:expire()
        {
            marker_device.write_data(mark.number);

            // check if timing is okay
            bool is_error = false;
            dur delay = now() - mark.onset;
            if( delay >= zep_markers_settings::THRESHOLD_INCORRECT_TIMING )
            {
                print_error("!! ERROR - "
                        + "Marker" + mark.number
                        + " request was " +  mark.onset
                        + " but the delay was " + string(delay) + " !!\n"
                        );
                marker_device.log_marker(mark, true, "delay: " + string(delay));
            }
            else
            {
                marker_device.log_marker(mark, false, "sent");
            }
        }
    }

    Timer marker_offset
    {
        on_event:expire()
        {
            marker_device.write_data(0x0);
        }
    }

    // Initialises pre-empting and logging of marker.
    void mark(Marker mark)
    {
        // TRANSFER it
        if(zep_markers_settings::DEVELOP_MODE)
            println(
                "[DEVELOP_MODE] Simulate marker " + mark.number + ":\n"
                + "pre-empt time:\t"
                + format_wt(now(), TIME_FORMAT_TIME_HHMMSS_MICROS) + "\n"
                + "planned onset:\t"
                + format_wt(mark.onset, TIME_FORMAT_TIME_HHMMSS_MICROS)
            );
        else
            this.set_marker_timers(mark);
    }

    // Start log and log the header info.
    void setup_log()
    {
        string header = "date;target_timing(ms);marker;status\r\n";

        string log_file_name =
            format_wt(
                now(),
                TIME_FORMAT_DATE_YYYYMMDD + TIME_FORMAT_TIME_HHMM
            ) +
            "-" + log_file_number + ".log";


        open_log(this.log_file_number, log_file_name);
        log(log_file_number, "## Zero time: " + format_wt(init_time) + "\r\n");
        log(log_file_number, header);
    }

    // Logs the marker with a status call
    void log_marker(Marker mark, bool success, string status)
    {
        dur target_time = mark.onset - init_time;

        //date;target_timing(ms);marker;status
        string delimiter = ";";
        string line =
            format_wt(now()) + delimiter
            + string(real(target_time)) + delimiter
            + mark.number + delimiter
            + string(success) + delimiter
            +  status + "\r\n";

        log(this.log_file_number, line);
    }

    on_event:cleanup()
    {
        // Log-related closures
        flush_log(log_file_number);
        close_log(log_file_number);

        // Turn-off the connections
        this.data_is_output = false;
        this.data_output_mask = 0x0;

        // Close the connection to the device
        if(this.is_open)
        {
            this.close();
        }
    }
}

// Scheduler that connects to related functions
Timer scheduler {
    // Members
    Marker[..] marker_schedule; // The wonders of arrays.
    Marker pre_empted_marker;

    on_event:init()
    {
        marker_schedule.size      = 0;
        marker_schedule.capacity  = 5;
    }

    on_event:expire()
    {
        Marker next_in_line = this.pop();

        // Check overloading conditions and final timing issues
        dur timing_off_set = now() - expire_time;
        if(timing_off_set > SCHEDULER_PRE_EMPT_ERROR_TOLERANCE)
        {
            print_error("!! ERROR Overloading - Marker " + next_in_line.number
                        +" failed to be pre-empted on time ("
                        + string(timing_off_set) +
                        " too late) !!\n"
                        );
            print_error("!! ERROR - Marker "
                        + next_in_line.number
                        + " dropped !!\n"
                        );
            marker_device.log_marker(next_in_line, false, "scheduling");
        }
        else
        {
            // all is well so it's marking time!
            marker_device.mark(next_in_line);
            this.pre_empted_marker = next_in_line;
        }
        reschedule();
    }

    // Starts to (re)schedule the pre-empt loading of markers
    void reschedule()
    {
        // Just stop if we ran out of markers
        if(marker_schedule.size == 0) return;

        Marker next_in_line = marker_schedule[marker_schedule.size-1];
        time next_in_line_scheduler_onset =
                next_in_line.onset - SCHEDULER_PRE_EMPT;

        // We do not abort or change if the next in line marker timing hasn't changed.
        if(next_in_line_scheduler_onset == scheduler.expire_time &&
            scheduler.is_running
            )
            return;

        time current_time = now();
        if(next_in_line_scheduler_onset <= current_time)
        { // we are too late! Oh noes!
            print_error("!! ERROR Overloading - Marker "
                    + next_in_line.number
                    + " failed to be scheduled to pre-empt on time ("
                    + string(current_time-next_in_line_scheduler_onset)
                    + " too late) !!\n"
                    );
            pop(); // drop the next marker
            print_error("!! ERROR - Marker "
                    + next_in_line.number
                    + " dropped !!\n"
                    );
            reschedule(); // restart (re)scheduling the next marker in line
            marker_device.log_marker(next_in_line, false, "scheduling");
        }
        else
        {
            scheduler.abort();
            scheduler.start(next_in_line_scheduler_onset);
        }
    }

    // Adds marker
    bool add(Marker mark)
    {
        if(!valid_marker(mark))
        {
            marker_device.log_marker(mark, false, "validation");
            return false;
        }

        insert_marker(mark);

        // make sure the scheduler is doing it's job
        reschedule();

        return true;
    }

    // Returns the next in line marker and removes it from the stack
    Marker pop()
    {
        Marker popped = marker_schedule[marker_schedule.size-1];
        marker_schedule.size = marker_schedule.size-1;
        return popped;
    }

    // Checks the validity of the marker
    // Returns true if the marker is valid
    bool valid_marker(Marker mark)
    {
        if(!valid_attributes(mark)) return false;
        if(!valid_timing(mark)) return false;
        return true;
    }

    // A marker is valid if the number and pulse_length are reasonable
    bool valid_attributes(Marker mark)
    {
        // check number range
        if(mark.number < 1 || mark.number > marker_device.maximum_marker_number )
        {
            print_error("!! WARNING - Marker "
                    + string(mark.number)
                    + " is outside of range (1-"
                    + string(marker_device.maximum_marker_number)
                    + ") !!\n"
                    );
            return false;
        }

        // check pulse length
        if(mark.pulse_length <= 0ms )
        {
            print_error("!! WARNING - Marker "
                    + string(mark.number)
                    + "'s pulse length is set to 0 or below ("
                    + string(mark.pulse_length)
                    + "), this doesn't make any sense !!\n"
                    );
            return false;
        }
        return true;
    }

    /*
    * Checks the timing to see if there are no conflicts with buffered or
    * scheduled markers. It does so more efficiently by assuming the stack
    * buffer is ordered based on onset timing.
    */
    bool valid_timing(Marker candidate_mark)
    {
        time candidate_scheduler_onset = candidate_mark.onset - SCHEDULER_PRE_EMPT;
        time candidate_offset = candidate_mark.onset + candidate_mark.pulse_length;

        // Check against the transered marker (the one currently loaded into the device)
        time transferred_offset =
                pre_empted_marker.onset + pre_empted_marker.pulse_length;

        if( transferred_offset >= candidate_scheduler_onset )
        {
            print_error("!! WARNING - Marker "
                    + string(candidate_mark.number)
                    + "'s onset conflicts with a marker ("
                    + pre_empted_marker.number
                    + ") that has already been pre-empteed to the device !!\n"
                    );
            return false;
        }

        int index = 0;
        while(index < marker_schedule.size)
        {

            time scheduled_scheduler_onset =
                    marker_schedule[index].onset - SCHEDULER_PRE_EMPT;
            time scheduled_offset =
                    marker_schedule[index].onset +
                    marker_schedule[index].pulse_length;

            if(overlap(scheduled_scheduler_onset,
                        scheduled_offset,
                        candidate_scheduler_onset,
                        candidate_offset
                        )
                )
            {
                print_error("!! WARNING - Marker "
                        + string(candidate_mark.number)
                        + "'s onset conflicts with a marker ("
                        + marker_schedule[index].number
                        + ") that has already been scheduled !!\n"
                        );

                return false;
            }

            index++;
        }

        return true;
    }

    // insert a marker to the marker schedule
    void insert_marker(Marker mark)
    {
        // add marker to the top of the stack
        marker_schedule.size = marker_schedule.size+1;
        marker_schedule[marker_schedule.size-1] = mark;

        // Move the inserted item into position.
        int index = marker_schedule.size - 1;
        Marker current_mark;
        Marker lower_mark;
        while(index >= 1)
        {
            current_mark = marker_schedule[index];
            lower_mark = marker_schedule[index - 1];
            if(current_mark.onset > lower_mark.onset) // first come first serve
                marker_schedule.swap(index, index - 1);
            else
                // We can stop because we operate at the assumption
                // the stack is already in temporal order
                return;
            index--;
        }
    }

    /*
    * Utility function
    * Returns true if the pulses set by that onset and offset and this onset
    * and offset overlap.
    */
    bool overlap(time that_onset, time that_offset, time this_onset, time this_offset)
    {
        return that_offset >= this_onset && this_offset >= that_onset;
    }

    // Prints the schedule for an overview of currently planned triggers
    void dump_schedule()
    {
        println("---");
        println("Overview of scheduled markers at "
                + format_wt(now(),
                TIME_FORMAT_TIME_HHMMSS_MICROS) +
                ":"
                );
        println("index\tmarker\tonset(hh:mm:ss...)\tpulse_length");
        int index = marker_schedule.size-1;
        while(index >= 0)
        {
            Marker m = marker_schedule[index];
            println(
                    string(index)
                    + ": \t" + string(m.number)
                    + "\t" + format_wt(m.onset, TIME_FORMAT_TIME_HHMMSS_MICROS)
                    + "\t\t" + m.pulse_length
                    );
            index--;
        }
        println("...");
    }
}
